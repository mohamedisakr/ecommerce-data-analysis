-- connect to postgresql
psql -U postgres

-- create user for database
CREATE USER power WITH PASSWORD '<super secret password>';

CREATE DATABASE online_retail WITH OWNER 'power' ENCODING 'UTF8';

-- create ecommerce table 
CREATE TABLE ecom_raw
(
Id NUMERIC(10,0),
InvoiceNo VARCHAR(50),
StockCode VARCHAR(50),
Description VARCHAR(250),
Quantity NUMERIC(10,0),
UnitPrice NUMERIC(14,2),
CustomerID VARCHAR(50),
Country VARCHAR(200),
Date DATE,
Hour NUMERIC(3,0)
); 


-- create holiday table
CREATE TABLE holiday_raw
(
Date DATE,
Holiday	VARCHAR(50),
WeekDay	VARCHAR(50),
Month CHAR(2),
Day CHAR(2),
Year CHAR(4)
);


-- load ecommerce data from CSV file
COPY ecom_raw FROM 'ecommerce_raw_data.csv' DELIMITER ',' CSV NULL 'NULL' HEADER;



-- load holiday data from CSV file
COPY holiday_raw FROM 'US Holiday Dates (2004-2021).csv' DELIMITER ',' CSV NULL 'NULL' HEADER;

-- get the ecom ALL columns
SELECT *
FROM ecom_raw
LIMIT 5;

-- get the ecom specific columns
SELECT Quantity, UnitPrice, Quantity * UnitPrice AS revenue, Date 
FROM ecom_raw
LIMIT 5;


-- get the holiday ALL columns
SELECT *
FROM holiday_raw
WHERE Year = '2011'
LIMIT 5;

-- get the holiday specific columns
SELECT Date, Holiday, Year 
FROM holiday_raw
WHERE Year = '2011';
--LIMIT 5;


-- join ecom & holiday
SELECT e.Quantity, e.UnitPrice, e.Quantity * UnitPrice AS revenue, h.holiday
FROM ecom_raw e LEFT JOIN holiday_raw h
ON e.date = h.date 
WHERE h.year = '2011';


-- sum by join & group ecom & holiday
SELECT h.holiday, ROUND(SUM(e.Quantity * UnitPrice), 2) AS total_revenue
FROM ecom_raw e LEFT JOIN holiday_raw h ON e.date = h.date 
WHERE h.year = '2011'
GROUP BY h.holiday, h.date
ORDER BY total_revenue DESC;

-- BEFORE CREATING INDEX
-- performance for sum by join & group ecom & holiday 
explain analyze SELECT h.holiday, ROUND(SUM(e.Quantity * UnitPrice), 2) AS total_revenue
FROM ecom_raw e LEFT JOIN holiday_raw h ON e.date = h.date 
WHERE h.year = '2011'
GROUP BY h.holiday, h.date
ORDER BY total_revenue DESC;

/*
 Sort  (cost=2561.68..2561.72 rows=19 width=52) (actual time=106.750..106.753 rows=11 loops=1)
   Sort Key: (round(sum((e.quantity * e.unitprice)), 2)) DESC
   Sort Method: quicksort  Memory: 25kB
   ->  HashAggregate  (cost=2560.99..2561.27 rows=19 width=52) (actual time=105.508..105.517 rows=11 loops=1)
         Group Key: h.holiday, h.date
         Batches: 1  Memory Usage: 24kB
         ->  Hash Join  (cost=7.51..2515.26 rows=4573 width=31) (actual time=0.125..99.433 rows=3743 loops=1)
               Hash Cond: (e.date = h.date)
               ->  Seq Scan on ecom_raw e  (cost=0.00..2054.01 rows=81601 width=15) (actual time=0.024..53.208 rows=81601 loops=1)
               ->  Hash  (cost=7.28..7.28 rows=19 width=20) (actual time=0.080..0.081 rows=19 loops=1)
                     Buckets: 1024  Batches: 1  Memory Usage: 10kB
                     ->  Seq Scan on holiday_raw h  (cost=0.00..7.28 rows=19 width=20) (actual time=0.017..0.067 rows=19 loops=1)
                           Filter: (year = '2011'::bpchar)
                           Rows Removed by Filter: 323
 Planning Time: 9.871 ms
 Execution Time: 109.060 ms
(16 rows)
*/

-- performance for selecting date from holiday table BEFORE creating index
explain analyze 
SELECT holiday, date
FROM holiday_raw
WHERE year = '2011';

/*
 Seq Scan on holiday_raw  (cost=0.00..7.28 rows=19 width=20) (actual time=0.026..0.318 rows=19 loops=1)
   Filter: (year ~ '2011'::text)
   Rows Removed by Filter: 323
 Planning Time: 0.691 ms
 Execution Time: 0.331 ms
(5 rows)
*/

-- using regex for selecting date from holiday table ==> worst than = ''
explain analyze 
SELECT holiday, date
FROM holiday_raw
WHERE year ~ '2011';


-- check table and index size BEFORE creating index
SELECT pg_relation_size('holiday_raw'), pg_indexes_size('holiday_raw');


-- create b-tree index for year on table holiday_raw
CREATE INDEX year_idx ON holiday_raw(year);


-- check table and index size AFTER creating index
SELECT pg_relation_size('holiday_raw'), pg_indexes_size('holiday_raw');


-- performance for selecting date from holiday table AFTER creating index
explain analyze 
SELECT holiday, date
FROM holiday_raw
WHERE year = '2011';

/*
 Seq Scan on holiday_raw  (cost=0.00..7.28 rows=19 width=20) (actual time=0.018..0.067 rows=19 loops=1)
   Filter: (year = '2011'::bpchar)
   Rows Removed by Filter: 323
 Planning Time: 4.533 ms
 Execution Time: 0.081 ms
(5 rows)
*/


-- create b-tree index for date on table holiday_raw
CREATE INDEX date_holiday_idx ON holiday_raw(date);


-- create b-tree index for date on table ecom_raw
CREATE INDEX date_ecom_idx ON ecom_raw(date);


-- AFTER CREATING INDEX
-- performance for sum by join & group ecom & holiday 
explain analyze SELECT h.holiday, ROUND(SUM(e.Quantity * UnitPrice), 2) AS total_revenue
FROM ecom_raw e LEFT JOIN holiday_raw h ON e.date = h.date 
WHERE h.year = '2011'
GROUP BY h.holiday, h.date
ORDER BY total_revenue DESC;

/*
 Sort  (cost=2561.68..2561.72 rows=19 width=52) (actual time=30.141..30.144 rows=11 loops=1)
   Sort Key: (round(sum((e.quantity * e.unitprice)), 2)) DESC
   Sort Method: quicksort  Memory: 25kB
   ->  HashAggregate  (cost=2560.99..2561.27 rows=19 width=52) (actual time=30.116..30.125 rows=11 loops=1)
         Group Key: h.holiday, h.date
         Batches: 1  Memory Usage: 24kB
         ->  Hash Join  (cost=7.51..2515.26 rows=4573 width=31) (actual time=0.125..26.586 rows=3743 loops=1)
               Hash Cond: (e.date = h.date)
               ->  Seq Scan on ecom_raw e  (cost=0.00..2054.01 rows=81601 width=15) (actual time=0.017..7.613 rows=81601 loops=1)
               ->  Hash  (cost=7.28..7.28 rows=19 width=20) (actual time=0.088..0.089 rows=19 loops=1)
                     Buckets: 1024  Batches: 1  Memory Usage: 10kB
                     ->  Seq Scan on holiday_raw h  (cost=0.00..7.28 rows=19 width=20) (actual time=0.019..0.080 rows=19 loops=1)
                           Filter: (year = '2011'::bpchar)
                           Rows Removed by Filter: 323
 Planning Time: 3.383 ms
 Execution Time: 30.203 ms
(16 rows)
*/

-- wrap select into view
CREATE VIEW revenue_by_holiday AS
SELECT h.holiday, ROUND(SUM(e.Quantity * UnitPrice), 2) AS total_revenue
FROM ecom_raw e LEFT JOIN holiday_raw h ON e.date = h.date 
WHERE h.year = '2011'
GROUP BY h.holiday, h.date
ORDER BY total_revenue DESC;


-- select from the view 
SELECT holiday, total_revenue
FROM revenue_by_holiday









